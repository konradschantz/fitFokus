generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?

  planId        String?
  plan          Plan?           @relation(fields: [planId], references: [id])

  cardio        CardioSession[]
  settings      UserSettings?
  workouts      Workout[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserSettings {
  id               String  @id @default(cuid())
  userId           String  @unique
  goal             String?
  daysPerWeek      Int?
  equipmentProfile String?
  lastPlanType     String?
  User             User    @relation(fields: [userId], references: [id])
}

model Exercise {
  id            String          @id @default(cuid())
  name          String          @unique
  category      String
  equipment     String?
  primaryMuscle String?
  metric        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cardio        CardioSession[]
  sets          Set[]
}

model Workout {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime @default(now())
  planType String
  note     String?
  sets     Set[]
  User     User     @relation(fields: [userId], references: [id])
}

model Set {
  id         String   @id @default(cuid())
  workoutId  String
  exerciseId String
  orderIndex Int
  weightKg   Float?
  reps       Int?
  rpe        Float?
  completed  Boolean  @default(false)
  notes      String?
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  Workout    Workout  @relation(fields: [workoutId], references: [id])

  @@unique([workoutId, orderIndex])
}

model CardioSession {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime @default(now())
  exerciseId   String
  durationMin  Int
  distanceM    Int?
  intensity    Int
  avgHeartRate Int?
  notes        String?
  Exercise     Exercise @relation(fields: [exerciseId], references: [id])
  User         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  data        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
}
